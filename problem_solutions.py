'''Solution of problems for the Euler Project. Each solution/problem is written as a function.
   Modules are imported inside each solution/problem.'''

#Problem 1

#If we list all the natural numbers below 10 that are multiples of 3 or 5, 
#we get 3, 5, 6 and 9. The sum of these multiples is 23.
#Find the sum of all the multiples of 3 or 5 below 1000.

def pr1(max = 999):
    def sum_mult(n):
        p = max // n
        return (n*p*(p+1))/2
    return sum_mult(3) + sum_mult(5) - sum_mult(15)

#Problem 2

#Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
#By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
#find the sum of the even-valued terms.   
    
def pr2():
    
    def fibonacci(num):
        if num == 0 or num == 1: return 1
        t1 = 0
        t2 = 1
        for _ in range(num):
            # count = t1 + t2
            # t1 = t2
            # t2 = count        
            t1, t2 = t2 , t1 + t2
        return t2

    total = 2
    count = 0
    while fibonacci(total) <4000000:
        if fibonacci(total) % 2 == 0:
            count += fibonacci(total)
        total += 1
    return count

#Problem 3

#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?

def pr3():
    
    factor = 2
    limite = 600851475143 
    
    while limite > 1:
        while limite % factor == 0:
            limite = limite // factor
        factor += 1    
            
    return factor - 1

#Problem 4

#A palindromic number reads the same both ways. The largest palindrome made from 
#the product of two 2-digit numbers is 9009 = 91 × 99.
#Find the largest palindrome made from the product of two 3-digit numbers.

def pr4():
    
    def revers(value):
        result = ''
        for i in range(1,len(str(value))+1):
            result += str(value)[len(str(value))-i]
        return result 
    
    start = 999999
    while start > 99999:
        if str(start) == revers(start):
            num1 = 999
            while num1 > 99:
                if num1 % 11 == 0:
                    num2 = 999
                    db = 1
                else:
                    num2 = 999
                    db = 11
                           
                while num2 > num1:
                    if num1 * num2 == start:
                        return num1,num2, num1 * num2
                    num2 -= db
                num1 -= 1           
        start -= 1
        
#Problem 5
        
#2520 is the smallest number that can be divided by each of the numbers from 1 to 10 
#without any remainder.      
#What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        
def pr5():
    k = 20
    N = 1
    i = 0
    limit = k**0.5
    p = [2,3,5,7,11,13,17,19]
    
    for i in p:
        a = 1
        if i < limit:
            import math
            a = math.log(k) // math.log(i)
            
        N = N*i**a
        i += 1
    return N

#Problem 6
  
#The sum of the squares of the first ten natural numbers is, 
#The square of the sum of the first ten natural numbers is,
#Hence the difference between the sum of the squares of the first ten natural 
#numbers and the square of the sum is
#Find the difference between the sum of the squares of the first one hundred 
#natural numbers and the square of the sum.

def pr6():
    suma = 100*101*(2*100+1)/6
        
    total = (100*101/2)**2 - suma
    
    return total

#Problem 7

#By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
#What is the 10 001st prime number?

def pr7():
    
    def is_prime(n):
        count = 0
        for i in range(1,n+1):
            if n % i == 0:
                count += 1
        return count == 2
    
    def is_prime_best(n):
    
        if n == 1: return False
        elif n == 2: return True
        elif n % 2 == 0: return False
        for i in range(3, int(n**0.5)+1,2):
            if n % i == 0:
                return False
        return True
    
    i = 2
    count = 1
    while count < 10002:
        if is_prime_best(i):
            count += 1
        i += 1
    return i - 1   

#Problem 8

#The four adjacent digits in the 1000-digit number that have the greatest product are 
#9 × 9 × 8 × 9 = 5832.
#Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
#What is the value of this product?

def pr8():
    import functools
    number = '''73167176531330624919225119674426574742355349194934
                96983520312774506326239578318016984801869478851843
                85861560789112949495459501737958331952853208805511
                12540698747158523863050715693290963295227443043557
                66896648950445244523161731856403098711121722383113
                62229893423380308135336276614282806444486645238749
                30358907296290491560440772390713810515859307960866
                70172427121883998797908792274921901699720888093776
                65727333001053367881220235421809751254540594752243
                52584907711670556013604839586446706324415722155397
                53697817977846174064955149290862569321978468622482
                83972241375657056057490261407972968652414535100474
                82166370484403199890008895243450658541227588666881
                16427171479924442928230863465674813919123162824586
                17866458359124566529476545682848912883142607690042
                24219022671055626321111109370544217506941658960408
                07198403850962455444362981230987879927244284909188
                84580156166097919133875499200524063689912560717606
                05886116467109405077541002256983155200055935729725
                71636269561882670428252483600823257530420752963450'''
                
    number = number.replace(' ','').replace('\n','')
    
    
    list_products = []
    
    i = 0
    
    while i < len(number) - 12:
        list_digits = []
        for j in range(i,i + 13):
            list_digits.append(int(number[j]))
        
        product = functools.reduce(lambda a,b: a*b,list_digits)
        list_products.append(product)
        i += 1
                
    return max(list_products)

##Problem 9

#A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
#For example, 32 + 42 = 9 + 16 = 25 = 52
#There exists exactly one Pythagorean triplet for which a + b + c = 1000.
#Find the product abc.

def pr9():
    
    for i in range(4,1000 + 1):
        for j in range(i,1000 - i):   
            k = 1000 - i - j 
            if i ** 2 + j ** 2 == k ** 2:
                return i * j * k

##Problem 10

#The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
#Find the sum of all the primes below two million.

def pr10():
    
    def is_prime_best(n):
    
        if n == 1: return False
        elif n == 2: return True
        elif n % 2 == 0: return False
        for i in range(3, int(n**0.5)+1,2):
            if n % i == 0:
                return False
        return True
        
    total = 2
    
    for i in range(3, 2000000, 2):
        if is_prime_best(i):
            total += i
        
    return total

##Problem 11

#In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
#The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
#What is the greatest product of four adjacent numbers in the same direction 
#(up, down, left, right, or diagonally) in the 20×20 grid?

def pr11():
    
    grid = '''08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
              49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
              81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
              52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
              22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
              24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
              32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
              67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
              24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
              21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
              78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
              16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
              86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
              19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
              04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
              88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
              04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
              20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
              20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
              01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'''
              
    grid = [int(i) for i in grid.split()]
    products = []

    for i in range(400):
        if i%20 < 17:
            products.append(grid[i]*grid[i+1]*grid[i+2]*grid[i+3])
        if i < 340:
            products.append(grid[i]*grid[i+20]*grid[i+40]*grid[i+60])
        if i%20 < 17 and i < 340:
            products.append(grid[i]*grid[i+21]*grid[i+42]*grid[i+63])
        if i%20 > 3 and i < 340:
            products.append(grid[i]*grid[i+19]*grid[i+38]*grid[i+57])
            
    return max(products)

##Problem 12

#The sequence of triangle numbers is generated by adding the natural numbers. 
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

def pr12():
    
    def divisors(nb):
        divisors = []
        for i in range(1, int(nb**0.5)+1):
            q, r = divmod(nb, i)
            if r == 0:
                if q >= i:
                    divisors.append(i)
                    if q > i:
                        divisors.append(nb//i)
        return divisors

    triangle = 3
    i = 2
    nb_divisors = 0
    while nb_divisors < 500:
        i += 1
        triangle += i
        nb_divisors = len(divisors(triangle))
        
    return triangle

##Problem 13

#Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

def pr13():
    
    numbers = '''37107287533902102798797998220837590246510135740250
                46376937677490009712648124896970078050417018260538
                74324986199524741059474233309513058123726617309629
                91942213363574161572522430563301811072406154908250
                23067588207539346171171980310421047513778063246676
                89261670696623633820136378418383684178734361726757
                28112879812849979408065481931592621691275889832738
                44274228917432520321923589422876796487670272189318
                47451445736001306439091167216856844588711603153276
                70386486105843025439939619828917593665686757934951
                62176457141856560629502157223196586755079324193331
                64906352462741904929101432445813822663347944758178
                92575867718337217661963751590579239728245598838407
                58203565325359399008402633568948830189458628227828
                80181199384826282014278194139940567587151170094390
                35398664372827112653829987240784473053190104293586
                86515506006295864861532075273371959191420517255829
                71693888707715466499115593487603532921714970056938
                54370070576826684624621495650076471787294438377604
                53282654108756828443191190634694037855217779295145
                36123272525000296071075082563815656710885258350721
                45876576172410976447339110607218265236877223636045
                17423706905851860660448207621209813287860733969412
                81142660418086830619328460811191061556940512689692
                51934325451728388641918047049293215058642563049483
                62467221648435076201727918039944693004732956340691
                15732444386908125794514089057706229429197107928209
                55037687525678773091862540744969844508330393682126
                18336384825330154686196124348767681297534375946515
                80386287592878490201521685554828717201219257766954
                78182833757993103614740356856449095527097864797581
                16726320100436897842553539920931837441497806860984
                48403098129077791799088218795327364475675590848030
                87086987551392711854517078544161852424320693150332
                59959406895756536782107074926966537676326235447210
                69793950679652694742597709739166693763042633987085
                41052684708299085211399427365734116182760315001271
                65378607361501080857009149939512557028198746004375
                35829035317434717326932123578154982629742552737307
                94953759765105305946966067683156574377167401875275
                88902802571733229619176668713819931811048770190271
                25267680276078003013678680992525463401061632866526
                36270218540497705585629946580636237993140746255962
                24074486908231174977792365466257246923322810917141
                91430288197103288597806669760892938638285025333403
                34413065578016127815921815005561868836468420090470
                23053081172816430487623791969842487255036638784583
                11487696932154902810424020138335124462181441773470
                63783299490636259666498587618221225225512486764533
                67720186971698544312419572409913959008952310058822
                95548255300263520781532296796249481641953868218774
                76085327132285723110424803456124867697064507995236
                37774242535411291684276865538926205024910326572967
                23701913275725675285653248258265463092207058596522
                29798860272258331913126375147341994889534765745501
                18495701454879288984856827726077713721403798879715
                38298203783031473527721580348144513491373226651381
                34829543829199918180278916522431027392251122869539
                40957953066405232632538044100059654939159879593635
                29746152185502371307642255121183693803580388584903
                41698116222072977186158236678424689157993532961922
                62467957194401269043877107275048102390895523597457
                23189706772547915061505504953922979530901129967519
                86188088225875314529584099251203829009407770775672
                11306739708304724483816533873502340845647058077308
                82959174767140363198008187129011875491310547126581
                97623331044818386269515456334926366572897563400500
                42846280183517070527831839425882145521227251250327
                55121603546981200581762165212827652751691296897789
                32238195734329339946437501907836945765883352399886
                75506164965184775180738168837861091527357929701337
                62177842752192623401942399639168044983993173312731
                32924185707147349566916674687634660915035914677504
                99518671430235219628894890102423325116913619626622
                73267460800591547471830798392868535206946944540724
                76841822524674417161514036427982273348055556214818
                97142617910342598647204516893989422179826088076852
                87783646182799346313767754307809363333018982642090
                10848802521674670883215120185883543223812876952786
                71329612474782464538636993009049310363619763878039
                62184073572399794223406235393808339651327408011116
                66627891981488087797941876876144230030984490851411
                60661826293682836764744779239180335110989069790714
                85786944089552990653640447425576083659976645795096
                66024396409905389607120198219976047599490197230297
                64913982680032973156037120041377903785566085089252
                16730939319872750275468906903707539413042652315011
                94809377245048795150954100921645863754710598436791
                78639167021187492431995700641917969777599028300699
                15368713711936614952811305876380278410754449733078
                40789923115535562561142322423255033685442488917353
                44889911501440648020369068063960672322193204149535
                41503128880339536053299340368006977710650566631954
                81234880673210146739058568557934581403627822703280
                82616570773948327592232845941706525094512325230608
                22918802058777319719839450180888072429661980811197
                77158542502016545090413245809786882778948721859617
                72107838435069186155435662884062257473692284509516
                20849603980134001723930671666823555245252804609722
                53503534226472524250874054075591789781264330331690'''
    
    list_numbers = numbers.split('\n')
    list_numbers = [int(i) for i in list_numbers]
    total = sum(list_numbers)
    
    return str(total)[:10]

##Problem 14

# The following iterative sequence is defined for the set of positive integers:

# n → n/2 (n is even)
# n → 3n + 1 (n is odd)

# Using the rule above and starting with 13, we generate the following sequence:

# 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
# It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. 
#Although it has not been proved yet (Collatz Problem), it is thought that all starting 
#numbers finish at 1.

# Which starting number, under one million, produces the longest chain?

# NOTE: Once the chain starts the terms are allowed to go above one million.

def pr14():
    
    sequence_length = {1: 0}
    def collatz_sequence_length(n):
        nonlocal sequence_length
        
        if n in sequence_length:
            return sequence_length[n]

        if n%2 == 0:
            length = collatz_sequence_length(n//2)
        else:
            length = collatz_sequence_length(3*n + 1)
            
        length += 1
        sequence_length[n] = length
        return length
    
    result = 0
    longest = 0
    for i in range(1, 1000000):
        length = collatz_sequence_length(i)
        if length > longest:
            result = i
            longest = length
            
    return result

##Problem 15

# Starting in the top left corner of a 2×2 grid, and only being able to move to 
# the right and down, there are exactly 6 routes to the bottom right corner.


# How many such routes are there through a 20×20 grid?

def pr15():
    
    from math import factorial
    
    def gridpath(n,m):
        return factorial(n + m) // (factorial(n) * factorial(m))
    
    return gridpath(20,20)

##Problem 16

# 215 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
# What is the sum of the digits of the number 21000?

def pr16():
    num = str(2 ** 1000)
    total = 0
    for i in num:
        total += int(i)
        
    return total

##Problem 17

# If the numbers 1 to 5 are written out in words: one, two, three, four, five, 
# then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

# If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, 
# how many letters would be used?

# NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) 
# contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" 
# when writing out numbers is in compliance with British usage.

def pr17():
    list_numbers1 = ['one', 'two', 'three','four','five','six','seven','eight','nine']
    list_numbers2 = ['ten', 'eleven', 'twelve','thirteen', 'fourteen', 'fifteen', 'sixteen', 
                     'seventeen','eighteen','nineteen']
    list_numbers3 = ['twenty','thirty', 'forty','fifty','sixty','seventy','eighty','ninety']
    list_numbers4 = ['hundred', 'thousand']
    
    letters_10 =sum([len(i) for i in list_numbers1])
    letters_20 = sum([len(i) for i in list_numbers2])
    
    letters_100 = letters_10 + letters_20
    
    for i in list_numbers3:
        for j in list_numbers1:
            letters_100 += len(i)
            letters_100 += len(i + j)
    
    letters_1000 = letters_100 
    
    for i in list_numbers1:
        letters_1000 += len(i + list_numbers4[0])
        letters_1000 += len(i + list_numbers4[0] + 'and') * 99 + letters_100
        
    letters_1000 += len('one' + list_numbers4[1])
       
    return letters_1000

##Problem 18

# By starting at the top of the triangle below and moving to adjacent numbers on 
# the row below, the maximum total from top to bottom is 23.
# That is, 3 + 7 + 4 + 9 = 23.

# Find the maximum total from top to bottom of the triangle below:
# NOTE: As there are only 16384 routes, it is possible to solve this problem by 
# trying every route. However, Problem 67, is the same challenge with a triangle 
# containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! 

def pr18():
    
    test= '''3
                7 4
                2 4 6
                8 5 9 3'''
    
    triangle =                                     '''75
                                                    95 64
                                                    17 47 82
                                                  18 35 87 10
                                                20 04 82 47 65
                                              19 01 23 75 03 34
                                            88 02 77 73 07 63 67
                                          99 65 04 28 06 16 70 92
                                          41 41 26 56 83 40 80 70 33
                                        41 48 72 33 47 32 37 16 94 29
                                        53 71 44 65 25 43 91 52 97 51 14
                                      70 11 33 28 77 73 17 78 39 68 17 57
                                    91 71 52 38 17 14 91 43 58 50 27 29 48
                                  63 66 04 68 89 53 67 30 73 16 69 87 40 31
                                04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'''
                                
    triangle = [[int(j) for j in i.split()] for i in triangle.split("\n")]
    triangle.reverse()
    
    for i in range(1, len(triangle)):
        for j, k in enumerate(triangle[i]):
            triangle[i][j] = k + max([triangle[i-1][j], triangle[i-1][j+1]])
            
    return triangle[-1][0]

##Problem 19

# You are given the following information, but you may prefer to do some research for yourself.

# 1 Jan 1900 was a Monday.
# Thirty days has September,
# April, June and November.
# All the rest have thirty-one,
# Saving February alone,
# Which has twenty-eight, rain or shine.
# And on leap years, twenty-nine.
# A leap year occurs on any year evenly divisible by 4, but not on a century unless 
# it is divisible by 400.
# How many Sundays fell on the first of the month during the twentieth century 
# (1 Jan 1901 to 31 Dec 2000)?

def pr19():

    import datetime
    resultat = 0
    for i in range(1901, 2001):
        for j in range(1, 13):
            
            if datetime.date(i, j, 1).weekday() == 6:
                resultat += 1
    return resultat   

##Problem 20

# n! means n × (n − 1) × ... × 3 × 2 × 1

# For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
# and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

# Find the sum of the digits in the number 100!

def pr20():
    t1 = 1
    t2  = 1
    for i in range(1,101):
        t1, t2 = t2, t2 * i
        
    return sum([int(i) for i in str(t2)])

##Problem 21

# Let d(n) be defined as the sum of proper divisors of n (numbers less than n which 
# divide evenly into n).
# If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each 
# of a and b are called amicable numbers.

# For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; 
# therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

# Evaluate the sum of all the amicable numbers under 10000.

def pr21():
    
    def divisors(nb):
        divisors = []
        for i in range(2, int(nb**0.5)+1):
            q, r = divmod(nb, i)
            if r == 0:
                if q >= i:
                    divisors.append(i)
                    if q > i:
                        divisors.append(nb//i)
        return divisors
    
    def d(nb):
        return 1 + sum(divisors(nb))

    result = 0
    for a in range(1,10001):
        b = d(a)
        if d(b) == a and a != b:
              result += a
    
    return result

##Problem 22

# Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over 
# five-thousand first names, begin by sorting it into alphabetical order. Then working out the 
# alphabetical value for each name, multiply this value by its alphabetical position in the list 
# to obtain a name score.
# For example, when the list is sorted into alphabetical order, COLIN, 
# which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain 
# a score of 938 × 53 = 49714.
# What is the total of all the name scores in the file?

def pr22():
    
    with open('names.txt') as f:
        text = f.read()
        
    names = text.split(',')
    names = [''] + [i[1:-1] for i in names]
    names.sort()
    
    result = 0
    
    for i,name in enumerate(names):
        
        result += i * sum([ord(j)-64 for j in name])
    
    return result

##Problem 23

# A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. 
# For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

# A number n is called deficient if the sum of its proper divisors is less than n and it is called 
# abundant if this sum exceeds n.

# As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be 
# written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all 
# integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit 
# cannot be reduced any further by analysis even though it is known that the greatest number that cannot be 
# expressed as the sum of two abundant numbers is less than this limit.

# Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
    
def pr23():
    
    def divisors(nb, extremum = False):
        divisors = []
        inf = 1 if extremum else 2
        for i in range(inf, int(nb**0.5)+1):
            q, r = divmod(nb, i)
            if r == 0:
                if q >= i:
                    divisors.append(i)
                    if q > i:
                        divisors.append(nb//i)
        return divisors

    def is_abundant(n):
        return sum(divisors(n))+1 > n
    
    abundants = [i for i in range(2, 28124) if is_abundant(i)]
    sommes = {}

    for i in range(len(abundants)):
        for j in range(i, len(abundants)):
            somme = abundants[i] + abundants[j]
            if somme > 28123:
                break
            sommes[somme] = 1

    result = (28123*28124)//2 - sum(sommes.keys())
    
    return result

##Problem 24

# A permutation is an ordered arrangement of objects. For example, 3124 is one possible 
# permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or 
# alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
# 012   021   102   120   201   210
# What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?

def pr24():
    
    import itertools
    permut = list(itertools.permutations('0123456789'))[999999]
    result = ''.join(permut)
    return result
    
##Problem 25

# The Fibonacci sequence is defined by the recurrence relation:

# Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
# Hence the first 12 terms will be:

# F1 = 1
# F2 = 1
# F3 = 2
# F4 = 3
# F5 = 5
# F6 = 8
# F7 = 13
# F8 = 21
# F9 = 34
# F10 = 55
# F11 = 89
# F12 = 144
# The 12th term, F12, is the first term to contain three digits.

# What is the index of the first term in the Fibonacci sequence to contain 1000 digits?

def pr25():
    
    def fibonacci(num):
        if num == 0 or num == 1: return 1
        t1 = 0
        t2 = 1
        for _ in range(num):
            # count = t1 + t2
            # t1 = t2
            # t2 = count        
            t1, t2 = t2 , t1 + t2
        return t2
    
    i = 1
    while True:
        result_fibonacci = fibonacci(i)
        if len(str(result_fibonacci)) == 1000:
            return i + 1
        i += 1
        
##Problem 26

# A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with 
# denominators 2 to 10 are given:

# 1/2	= 	0.5
# 1/3	= 	0.(3)
# 1/4	= 	0.25
# 1/5	= 	0.2
# 1/6	= 	0.1(6)
# 1/7	= 	0.(142857)
# 1/8	= 	0.125
# 1/9	= 	0.(1)
# 1/10	= 	0.1
# Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 
# 6-digit recurring cycle.
# Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal 
# fraction part.

def pr26():
    def cycle_length(den):
        reste = 10
        i = 0
        while reste != 10 or i < 1:
            reste = (reste % den) * 10
            i += 1
        return i

    longest = 0
    for i in range(2, 1000):
        if i%2 != 0 and i%5 != 0:
            length = cycle_length(i)
            if length > longest:
                longest = length
                result = i
    return result

##Problem 27

# Euler discovered the remarkable quadratic formula:


# It turns out that the formula will produce 40 primes for the consecutive integer values . 
# However, when  is divisible by 41, and certainly when  is clearly divisible by 41.

# The incredible formula  was discovered, which produces 80 primes for the consecutive values . 
# The product of the coefficients, −79 and 1601, is −126479.
# Considering quadratics of the form:
# , where  and 
# where  is the modulus/absolute value of 
# e.g.  and 
# Find the product of the coefficients,  and , for the quadratic expression that produces the maximum number of primes for consecutive values of , starting with .
    
def pr27():
    
    def primes_below(end):
        if end < 2:
            return []
        lng = (end//2) - 1
        primes = [True]*lng  
        for i in range(int(lng**0.5)):  
            if primes[i]:
                for j in range(2*i*(i + 3) + 3, lng, 2*i + 3):
                    primes[j] = False  
        return [2] + [i*2 + 3 for i, j in enumerate(primes) if j]
    
    def divisors(nb, extremum = False):
        divisors = []
        inf = 1 if extremum else 2
        for i in range(inf, int(nb**0.5)+1):
            q, r = divmod(nb, i)
            if r == 0:
                if q >= i:
                    divisors.append(i)
                    if q > i:
                        divisors.append(nb//i)
        return divisors

    primes = primes_below(1000)
    longest = 0

    for b in primes:

        for a in range(-999, 1000, 2):
            image = b
            n = 0

            while len(divisors(abs(image), True)) == 2:
                n += 1
                image = n**2 + a*n + b
            if n > longest:
                longest = n
                result = a*b
    return result

##Problem 28

# Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is 
# formed as follows:

# 21 22 23 24 25
# 20  7  8  9 10
# 19  6  1  2 11
# 18  5  4  3 12
# 17 16 15 14 13

# It can be verified that the sum of the numbers on the diagonals is 101.

# What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?

def pr28():
    
    def number_sup_right(n):
        if n == 1: return 9
        else: 
            result = number_sup_right(n-1) +8*n
        return result
    

    def get_4_corners(n):
        sup_right = number_sup_right(n)
        sup_left = sup_right - 2 * n
        inf_right = sup_left - 2 * n
        inf_left = inf_right - 2 * n
        return (sup_right, sup_left, inf_right, inf_left)

    result = 0
    
    for i in range(1,501):
        result += sum(get_4_corners(i))
        
    return result + 1

##Problem 29

# Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

# 22=4, 23=8, 24=16, 25=32
# 32=9, 33=27, 34=81, 35=243
# 42=16, 43=64, 44=256, 45=1024
# 52=25, 53=125, 54=625, 55=3125
# If they are then placed in numerical order, with any repeats removed, we get the 
# following sequence of 15 distinct terms:

# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

# How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

def pr29():
    def give_powers(n, p):
        for i in range(2,p+1):
            yield n**i
            
    all_list = set()
    
    for i in range(2,101):
        powers = list(give_powers(i,100))
        all_list.update(powers)
        
    return len(all_list)

##Problem 30

# Surprisingly there are only three numbers that can be written as the sum of fourth powers of their 
# digits:

# 1634 = 14 + 64 + 34 + 44
# 8208 = 84 + 24 + 04 + 84
# 9474 = 94 + 44 + 74 + 44
# As 1 = 14 is not a sum it is not included.

# The sum of these numbers is 1634 + 8208 + 9474 = 19316.

# Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.

def pr30():
            
    def give_digits(n):
        digits = []
        for _ in range(len(str(n))):
            digits.append(n%10)
            n = n // 10        
        return digits
    
    result = []
    for i in range(2,354294):
        digits =  give_digits(i) 
        if i == sum([j**5 for j in digits]):
            result.append(i)
            
    return sum(result)

##Problem 31

# In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins 
# in general circulation:
# 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).
# It is possible to make £2 in the following way:
# 1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
# How many different ways can £2 be made using any number of coins?

def pr31():
    result = 0
    for i in range(0,200+1,200):
        for j in range(0,200-i+1,100):
            for k in range(0,200-i-j+1,50):
                for l in range(0,200-i-j-k+1,20):
                    for m in range(0,200-i-j-k-l+1,10):
                        for n in range(0,200-i-j-k-l-m+1,5):
                            for o in range(0,200-i-j-k-l-m-n+1,2):
                                p = 200-i-j-k-l-m-n-o
                                if p>= 0:
                                    result += 1
    return result

##Problem 32

# We shall say that an n-digit number is pandigital if it makes use of all the digits 1 
# to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.
# The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, 
# multiplier, and product is 1 through 9 pandigital.
# Find the sum of all products whose multiplicand/multiplier/product identity can be written 
# as a 1 through 9 pandigital.
# HINT: Some products can be obtained in more than one way so be sure to only include it once 
# in your sum.

def pr32():
    p = set()
                     
    for a in range(1, 100):
        for b in range(1, 9999 // a):
            if ''.join(sorted("%d%d%d" % (a, b, a*b))) == '123456789':
                p.add(a * b)
    return sum(p)
   
##Problem 33

# The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting 
# to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, is obtained by 
# cancelling the 9s.
# We shall consider fractions like, 30/50 = 3/5, to be trivial examples.
# There are exactly four non-trivial examples of this type of fraction, less than one in value, 
# and containing two digits in the numerator and denominator.
# If the product of these four fractions is given in its lowest common terms, find the value of 
# the denominator.                     
    

def pr33():
    d=1
    for i in range(1, 10):
        for j in range(1, i):
            q, r = divmod(9*j*i, 10*j-i)
            if not r and q <= 9:
                d*= i/float(j)  
    return d
    
##Problem 34

# 145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
# Find the sum of all numbers which are equal to the sum of the factorial of their digits.
# Note: As 1! = 1 and 2! = 2 are not sums they are not included.

def pr34():
    import math
    result = []
    for i in range(3,9999999):
        sum_total = 0
        for j in str(i):
            sum_total += math.factorial(int(j))
        if sum_total == i:
            result.append(i)
    return sum(result)

##Problem 35

# The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, 
# are themselves prime.
# There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
# How many circular primes are there below one million?

def pr35():
    import itertools
    
    def divisors(nb):
        divisors = []
        inf = 1 
        for i in range(inf, int(nb**0.5)+1):
            q, r = divmod(nb, i)
            if r == 0:
                if q >= i:
                    divisors.append(i)
                    if q > i:
                        divisors.append(nb//i)
        return divisors
    
    result = 0
    
    for i in range(2,1000001):
        all_primes = True
        for index, *ans in zip(range(len(str(i))),*[itertools.cycle(str(i))]*(len(str(i))+1)):
            number = int(''.join(ans[:-1]))
            if len(divisors(number)) != 2:
                all_primes = False
                break
        if all_primes:
            result += 1

    return result

##Problem 36

# The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.
# Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.
# (Please note that the palindromic number, in either base, may not include leading zeros.)

def pr36():
    def is_palindromic(n):
        return str(n) == str(n)[::-1]
    
    def binary_base(n):
        return f'{n:b}'
    
    result = []
    
    for i in range(1000001):
        if is_palindromic(i) and is_palindromic(binary_base(i)):
            result.append(i)
            
    return sum(result)

##Problem 37

# The number 3797 has an interesting property. Being prime itself, it is possible to continuously
# remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we 
# can work from right to left: 3797, 379, 37, and 3.
# Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
# NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.

def pr37():
    
    def isPrime(n):
        if n in {2, 3, 5, 7}:
            return True
        if n < 2 or n%2 == 0:
            return False
        if n%3 == 0 or n%5 == 0:
            return False
        r = int(n**0.5)
        f = 5
        while f <= r:
            if n%f == 0 or n%(f+2) == 0:
                return False
            f += 6
        return True
    
    def gen(nb):
        yield nb
        nb_str = str(nb)
        for k in range(1, len(nb_str)):
            yield int(nb_str[k:])
            yield int(nb_str[:-k])
            
    c = s = 0
    i = 11
    while c < 11:
        if all(map(isPrime, gen(i))):
            c += 1
            s += i
        i += 2
        
    return s

##Problem 38

# Take the number 192 and multiply it by each of 1, 2, and 3:

# 192 × 1 = 192
# 192 × 2 = 384
# 192 × 3 = 576
# By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 
# the concatenated product of 192 and (1,2,3)
# The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the 
# pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).
# What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated 
# product of an integer with (1,2, ... , n) where n > 1?

def pr38():
    
    def is_pandigital(*args, **kwargs):
        num = sorted(''.join(str(arg) for arg in args))
    
        try:
            if kwargs['length'] and len(num) != kwargs['length']:
                return False
        except KeyError:
            pass
    
        for i in range(len(num)):
            if str(i+1) != str(num[i]):
                return False
        return True

    def concatenated_product(number, n):
        try:
            return int(''.join(str(number * i) for i in range(1,n+1)))
        except ValueError:
            print(number, n)
        
    return max(concatenated_product(i, n) for i in range(10000) for n in range(1, 10) if 
               is_pandigital(concatenated_product(i, n)))

##Problem 39

# If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, 
# there are exactly three solutions for p = 120.
# {20,48,52}, {24,45,51}, {30,40,50}
# For which value of p ≤ 1000, is the number of solutions maximised?

def pr39():
    from collections import defaultdict
            
    def calculate_solutions(limit):
        res = defaultdict(list)
        for a in range(1, limit+1):
            for b in range(a, limit+1):
                for c in range(b, limit+1):
                    if a**2 + b**2 == c**2:
                        res[a+b+c].append((a,b,c))
        return res                

    solutions = calculate_solutions(1500)
    most = max(len(s) for s in list(solutions.values()))
    for p, s in sorted(solutions.items()):
        if len(s) == most:
            return p

## Problem 40

# An irrational decimal fraction is created by concatenating the positive integers:
# 0.123456789101112131415161718192021...
# It can be seen that the 12th digit of the fractional part is 1.
# If dn represents the nth digit of the fractional part, find the value of the following expression.
# d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000

def pr40():
    digit = 1
    fractional = ''
    while len(fractional) <= 999999:
        fractional += str(digit)
        digit += 1
        
    return int(fractional[0])*int(fractional[9])*int(fractional[99])*int(fractional[999])*\
            int(fractional[9999])*int(fractional[99999])*int(fractional[999999])
            
## Problem 41

# We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n 
# exactly once. For example, 2143 is a 4-digit pandigital and is also prime.
# What is the largest n-digit pandigital prime that exists?

def pr41():
    from itertools import permutations
    
    def isPrime(n):
        if n in {2, 3, 5, 7}:
            return True
        if n < 2 or n%2 == 0:
            return False
        if n%3 == 0 or n%5 == 0:
            return False
        r = int(n**0.5)
        f = 5
        while f <= r:
            if n%f == 0 or n%(f+2) == 0:
                return False
            f += 6
        return True
    
    max_pandemial = 0
    for i in range(1,10):
        all_permutations = permutations(''.join([str(j) for j in range(1,i+1)]))
        for k in all_permutations:
            k = ''.join(k)
            if isPrime(int(k)):
                if max_pandemial < int(k):
                    max_pandemial = int(k)
    
    return max_pandemial

## Problem 42

# The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten 
# triangle numbers are:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# By converting each letter in a word to a number corresponding to its alphabetical position 
# and adding these values we form a word value. For example, the word value for SKY 
# is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the 
# word a triangle word.

# Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing 
# nearly two-thousand common English words, how many are triangle words?

def pr42():
    from string import ascii_uppercase
    
    def find_sum__word(word):
        word = word.upper()
        list_index = []
        
        for i in word:
            list_index.append(ascii_uppercase.index(i) + 1)
            
        return sum(list_index)
    
    def triangle_number(n):
        return (n * (n + 1)) // 2
    
    with open('words.txt') as f:
        all_words = f.read()
        
    all_words = all_words.split(',')
    all_words = [word.replace('"','') for word in all_words]
    
    list_triangle_n = {triangle_number(i) for i in range(1,100)}
    
    count = 0
    for word in all_words:
        sum_word = find_sum__word(word)
        if sum_word in list_triangle_n:
            count += 1
            
    return count   
    
## Problem 43

# The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each 
# of the digits 0 to 9 in some order, but it also has a rather interesting sub-string 
# divisibility property.

# Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:

# d2d3d4=406 is divisible by 2
# d3d4d5=063 is divisible by 3
# d4d5d6=635 is divisible by 5
# d5d6d7=357 is divisible by 7
# d6d7d8=572 is divisible by 11
# d7d8d9=728 is divisible by 13
# d8d9d10=289 is divisible by 17
# Find the sum of all 0 to 9 pandigital numbers with this property.

def pr43():
    
    from itertools import permutations
    
    all_permutations = permutations('0123456789')
    
    all_numbers = []
    
    for candidat in all_permutations:
        if int(''.join(candidat[1:4])) % 2 == 0:
            if int(''.join(candidat[2:5])) % 3 == 0:
                if int(''.join(candidat[3:6])) % 5 == 0:
                    if int(''.join(candidat[4:7])) % 7 == 0:
                        if int(''.join(candidat[5:8])) % 11 == 0:
                            if int(''.join(candidat[6:9])) % 13 == 0:
                                if int(''.join(candidat[7:10])) % 17 == 0:
                                    
                                    all_numbers.append(int(''.join(candidat)))

    return sum(all_numbers)            

## Problem 44

# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not 
# pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal 
# and D = |Pk − Pj| is minimised; what is the value of D?

def pr44():
    from itertools import combinations
    
    set_pentagon = {n*(3*n-1)//2 for n in range(1,3000)}
    
    c = combinations(set_pentagon, 2)
    
    for p1, p2 in c:
        if p1 + p2 in set_pentagon and abs(p1 - p2) in set_pentagon:
            return abs(p1 - p2)
                        
## Problem 45

# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
# Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
# It can be verified that T285 = P165 = H143 = 40755.
# Find the next triangle number that is also pentagonal and hexagonal.

def pr45():

    set_triangle = {n*(n+1)//2 for n in range(1,1000000)}
    set_pentagonal = {n*(3*n-1)//2 for n in range(1,1000000)}
    set_hexagonal = {n*(2*n-1) for n in range(1,1000000)}
    
    for i in set_triangle:
        if i in set_pentagonal and i in set_hexagonal and i not in {1, 40755}:
            return i
        
## Problem 46

# It was proposed by Christian Goldbach that every odd composite number can be written as the 
# sum of a prime and twice a square.

# 9 = 7 + 2×12
# 15 = 7 + 2×22
# 21 = 3 + 2×32
# 25 = 7 + 2×32
# 27 = 19 + 2×22
# 33 = 31 + 2×12

# It turns out that the conjecture was false.

# What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?

def pr46():
    from itertools import product
    
    def sieve(n):
        numbers = list(range(2, n+1))
        p = 2
        j = 0
        done = False
        while not done:
            for i, n in enumerate(numbers):
                if n % p == 0 and n!=p:
                    numbers.pop(i)
            j += 1
            p = numbers[j]
            if p**2 > n:
                done = True
        return numbers

    primes = sieve(10000)
    composites = set(n for n in range(2,10000) if n not in primes)
    twicesquares = set(2*(n**2) for n in range(100))

    sums = set(sum(c) for c in product(primes, twicesquares))
    return min(n for n in composites if n not in sums and n % 2 != 0)
    
## Problem 47

# The first two consecutive numbers to have two distinct prime factors are:
# 14 = 2 × 7
# 15 = 3 × 5
# The first three consecutive numbers to have three distinct prime factors are:
# 644 = 2² × 7 × 23
# 645 = 3 × 5 × 43
# 646 = 2 × 17 × 19.
# Find the first four consecutive integers to have four distinct prime factors each. 
# What is the first of these numbers?
def pr47():
    def npf(number):
        i = 2
        a = set()
        while i < number**0.5 or number == 1:
            if number % i == 0:
                number = number/i
                a.add(i)
                i -= 1
            i += 1
        return (len(a)+1)

    j = 2*3*5*7

    while True:
        if npf(j) == 4:
            j += 1
            if npf(j) == 4:
                j += 1
                if npf(j) == 4:
                    j += 1
                    if npf(j) == 4:
                        return j-3
        j += 1
        
## Problem 48

# The series, 11 + 22 + 33 + ... + 1010 = 10405071317.
# Find the last ten digits of the series, 11 + 22 + 33 + ... + 10001000.

def pr48():
    result = 0
    for i, j in zip(range(1,1001),range(1,1001)):
        result += i**j
        
    return str(result)[-10:]
    

## Problem 49

# The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, 
# is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit 
# numbers are permutations of one another.
# There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, 
# exhibiting this property, but there is one other 4-digit increasing sequence.
# What 12-digit number do you form by concatenating the three terms in this sequence?

def pr49():
    from itertools import permutations
    
    def sieve(n):
        numbers = list(range(2, n+1))
        p = 2
        j = 0
        done = False
        while not done:
            for i, n in enumerate(numbers):
                if n % p == 0 and n!=p:
                    numbers.pop(i)
            j += 1
            p = numbers[j]
            if p**2 > n:
                done = True
        return numbers
    
    primes = sieve(10000)
    
    for i in range(1,3333):
        for prime in primes:
            if prime != 1487:
                all_permutations = [''.join(i) for i in permutations(str(prime))]
                second_number = prime + i
                if second_number in primes and str(second_number) in all_permutations:
                    third_number = second_number + i
                    if third_number in primes and str(third_number) in all_permutations:
                        return str(prime) + str(second_number) + str(third_number)
                
## Problem 50

# The prime 41, can be written as the sum of six consecutive primes:
# 41 = 2 + 3 + 5 + 7 + 11 + 13
# This is the longest sum of consecutive primes that adds to a prime below one-hundred.
# The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms,
# and is equal to 953.
# Which prime, below one-million, can be written as the sum of the most consecutive primes?

def pr50():
    def sieve(n):
        numbers = list(range(2, n+1))
        p = 2
        j = 0
        done = False
        while not done:
            for i, n in enumerate(numbers):
                if n % p == 0 and n!=p:
                    numbers.pop(i)
            j += 1
            p = numbers[j]
            if p**2 > n:
                done = True
        return numbers
    
    primes = sieve(1000000)
    
    index = -1
    dic_primes = {}
    
    while index > -len(primes):
        start = 0
        found = False
        while start < len(primes) - 1 and not found:
            step = 1
            sum_primes = primes[start]
            while sum_primes < primes[index] and start + step < len(primes):
                sum_primes += primes[start + step]
                if sum_primes == primes[index]:
                    dic_primes[len(primes[start: start + step + 1])] = primes[index]
                    found = True
                    break
                step += 1
            start += 1  
        index -= 1
    
    max_terms = 0
    
    for i in dic_primes:
        if i > max_terms:
            max_terms = i
    
    return dic_primes[max_terms]

if __name__ == '__main__':
    print(pr50())   
